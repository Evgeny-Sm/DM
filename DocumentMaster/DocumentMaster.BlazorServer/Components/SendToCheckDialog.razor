@using DM.BLL.Services
@using DM.DAL.Models
@using Models
@using Microsoft.EntityFrameworkCore;

@inject DialogService DialogService
@inject PersonService PersonService
@inject FileService FileService
@inject ControlService ControlService




<RadzenCard Style="width: 100%; overflow: hidden;">
    
        <div class="row mb-5">
            <div class="col-md-4" style="align-self: center;">
                <RadzenLabel Text="Выберите проверяющего" />
            </div>
            <div class="col-md-4" style="align-content:center">
                <RadzenDropDownDataGrid  TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                        Data=@(Persons) Style="width: 200%" AllowColumnResize="true"
                                        TextProperty="LastName" ValueProperty="Id" AllowFilteringByAllStringColumns="true"
                                        Change=@(args => OnChangePerson(args))>
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="FirstName" Title="FirstName" Width="120px" />
                        <RadzenDropDownDataGridColumn Property="LastName" Title="LastName" Width="120px" />
                    </Columns>
                </RadzenDropDownDataGrid>
            </div>
        </div>
       
        <br />
        <div class="d-inline">
        <RadzenButton Disabled=@IsSubmitting ButtonStyle="ButtonStyle.Secondary" Click=@OnSubmit Text="Submit"></RadzenButton>
        <RadzenButton Click="@((args) => DialogService.Close(false))" ButtonStyle="ButtonStyle.Danger" Text="Cancel" Style="width: 120px" />
        </div>

</RadzenCard>



@code {
    [Parameter]
    public FileUnit SelectedFile { get; set; }

    private ControlDTO Control { get; set; } = new ControlDTO();

    private IEnumerable<PersonDTO> Persons { get; set; }

    private FileDTO FileDTOForSave { get; set; }

    private int ChoosenControllerId { get; set; }


    private bool IsSubmitting;

    protected override async Task OnInitializedAsync()
    {
        Persons = await PersonService.GetPersonsAsync();       
    }



    private async void OnSubmit()
    {
        if (IsSubmitting)
        {
            return;
        }
        try
        {
            IsSubmitting = true;
        await FileService.SendFileToCheckAsync(SelectedFile.Id,ChoosenControllerId);  

        }
        finally
        {
            IsSubmitting = false;
        }

        DialogService.Close(true);

    }

    void OnChangePerson(object value)
    {
        ChoosenControllerId = (int)value;

    }

}
