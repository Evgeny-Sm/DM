@using Models


<div class="container">
    <div class="row">
        <div class="col-12 my-5">
            <RadzenCard Class="w-100 mb-4 d-inline-block">
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Подробности" Component="dataLabels" Style="margin-left: 30px; vertical-align: middle;" />
            </RadzenCard>
                <RadzenChart>
                    <RadzenDonutSeries Data="@Projects" CategoryProperty="Name" ValueProperty="CountDrawings">
                        <ChildContent>
                            <RadzenSeriesDataLabels Visible="@showDataLabels" />
                        </ChildContent>
                        <TitleTemplate>
                            <div class="rz-donut-content">
                                <div>По проектам</div>
                            </div>
                        </TitleTemplate>
                    </RadzenDonutSeries>
                </RadzenChart>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public List<FileDTO>? Files { get; set; }

    private List<FileDTO>? DataList { get; set; }

    private List<ProjectVM>? Projects { get; set; }

    bool showDataLabels = false;

    protected override void OnParametersSet()
    {

        if (Files is null)
        {
            return;
        }
        List<ProjectVM> prjList = new();

        List<string> projNames = new();

        foreach (var f in Files)
        {
            projNames.Add(f.ProjectName);
        }
        foreach (var p in projNames.Distinct())
        {
            int count = Files.Where(t => t.ProjectName == p).Sum(f => f.NumbersDrawings);
            var prj = new ProjectVM { Name=p, CountDrawings=count };
            prjList.Add(prj);
        }
        Projects = prjList;
    }

    private class ProjectVM
    {
        public string Name { get; set; }
        public int CountDrawings { get; set; }

    }

}