@attribute [Authorize]
@using DM.BLL.Services
@using DM.DAL.Models
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.EntityFrameworkCore
@using Models
@using System.Text.Json



@inject PersonService PersonService
@inject ControlService ControlService
@inject FileService FileService
@inject NavigationManager navManager
@inject QuestionService QuestionService
@inject TooltipService tooltipService


<AuthorizeView Roles="user">
    <Authorized>
        <RadzenCard  Style="margin-bottom:20px">
            <b>Файл: @ItemName   </b>
            <b>Разработал: @Developer   </b>
            <b>Проверил: @Controller   </b>
            <div>Дата создания: @DateToCreate</div>
            <div>Дата утверждения: @DateToArhive</div>
            <div>Отдел: @Department </div>
            <div>Проект: @ProjectName </div>
            <div>Раздел проекта: @SectionProject </div>
            <div>Количество листов в файле: @NumbersDrawing </div>
            <div>Описание: @Descriptoin </div>
            <br />
            <div class="row">
                <div class="col-6">
                    <div class="d-inline-block">
                        <RadzenCheckBox @bind-Value=@CheckBoxOld Name="CheckBox1" TValue="bool" Change=@(args => OnChange(args)) />
                        <RadzenLabel Text="Старая версия" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                    </div>
                </div>
                <div class="col-6">
                    <a @onclick="RedirectToQuestions" href="javascript:void(0)">Обсуждение</a>
                </div>
            </div>
            <br />

            @if (Unit != null && (Unit.PersonId == CurrentPerson.Id || IsController))
            {
                <br />
                <div>
                    <span style="color:cadetblue">Проверки:</span>
                </div>
                @foreach (var c in Controls)
                {
                    <div>
                        <span style="color:cadetblue">@c.PersonName (@c.DateTime.ToString("HH:mm| dd:MMM:yy")): @c.Description</span>
                    </div>
                }
            }
        </RadzenCard>
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="admin,head">
    <Authorized>
        <RadzenCard  Style="margin-bottom:20px">
            <b>Файл: @ItemName   </b>
            <b>Разработал: @Developer   </b>
            <b>Проверил: @Controller   </b>
            <div>Дата создания: @DateToCreate</div>
            <div>Дата утверждения: @DateToArhive</div>
            <div>Отдел: @Department </div>
            <div>Проект: @ProjectName </div>
            <div>Раздел проекта: @SectionProject </div>
            <div>Шифр: @ProjectCode </div>
            <div>Количество листов в файле: @NumbersDrawing </div>
            <div>Описание: @Descriptoin </div>
            <div>Затраты на разработку: @TimeToDev </div>
            <div>Затраты на проверку: @TimeToControl </div>
            <br />

            <div class="row">
                <div class="col-6">
                    <div class="d-inline-block">
                        <RadzenCheckBox @bind-Value=@CheckBoxOld Name="CheckBox1" TValue="bool" Change=@(args => OnChange(args)) />
                        <RadzenLabel Text="Старая версия" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                    </div>
                </div>
                <div class="col-6">
                    <a @onclick="RedirectToQuestions" href="javascript:void(0)">Обсуждение</a>
                </div>
            </div>
            <br />
            <div>
                <span style="color:cadetblue">Проверки:</span>
            </div>
            <br />
            @foreach (var c in Controls)
            {
                <div>
                    <span style="color:cadetblue">@c.PersonName (@c.DateTime.ToString("HH:mm| dd:MMM:yy")): @c.Description</span>
                </div>
            }
        </RadzenCard>

    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public IList<FileUnit>? SelectedFiles { get; set; }

    [Parameter]
    public EventCallback<bool> SetOldVersion { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private string ItemName { get; set; } = string.Empty;
    private string Developer { get; set; } = string.Empty;
    private string Controller { get; set; } = string.Empty;
    private string DateToArhive { get; set; } = string.Empty;
    private string DateToCreate { get; set; } = string.Empty;
    private string Department { get; set; } = string.Empty;
    private string ProjectName { get; set; } = string.Empty;
    private string SectionProject { get; set; } = string.Empty;
    private string NumbersDrawing { get; set; } = string.Empty;
    private string TimeToDev { get; set; } = string.Empty;
    private string TimeToControl { get; set; } = string.Empty;
    private string Descriptoin { get; set; } = string.Empty;
    private string ProjectCode { get; set; } = string.Empty;
    private FileUnit? Unit { get; set; }



    private bool IsController { get; set; } = false;

    private IEnumerable<ControlDTO> Controls { get; set; } = new List<ControlDTO>();

    private PersonDTO CurrentPerson { get; set; } = new();

    private bool CheckBoxOld;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        CurrentPerson.Id = int.Parse(authState.User.Claims
            .Where(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")
            .FirstOrDefault().Value);

    }

    protected override async Task OnParametersSetAsync()
    {

        Controls = new List<ControlDTO>();


        if (SelectedFiles.Count == 0)
        {
            ItemName = string.Empty;
            Developer = string.Empty;
            Controller = string.Empty;
            DateToArhive = string.Empty;
            DateToCreate = string.Empty;
            Department = string.Empty;
            ProjectName = string.Empty;
            SectionProject = string.Empty;
            NumbersDrawing = string.Empty;
            TimeToDev = string.Empty;
            TimeToControl = string.Empty;
            Descriptoin = string.Empty;
            ProjectCode = string.Empty;
            return;
        }
        Unit = SelectedFiles.FirstOrDefault();
        if (Unit is null)
        {
            return;
        }
        Controls = await ControlService.GetControlsByFileIdAsync(Unit.Id);

        IsController = Controls.Select(c => c.PersonId).Contains(CurrentPerson.Id);

        var ctrl = Controls.Where(c => c.IsConfirmed == true).FirstOrDefault();

        if (ctrl != null)
        {
            Controller = ctrl.PersonName;
            DateToArhive = ctrl.DateTime.ToString("HH:mm|dd:MMM:yy");
        }
        else
        {
            Controller = string.Empty;
            DateToArhive = string.Empty;
        }
        ItemName = Unit.Name;
        DateToCreate = Unit.CreateDate.ToString("HH:mm|dd:MMM:yy");

        TimeToControl = Controls.Sum(c => c.TimeForChecking).ToString();

        Developer = $"{Unit.Person.FirstName} {Unit.Person.LastName}";

        Department = Unit.Department.Name;

        ProjectName = Unit.Project.Name;

        SectionProject = Unit.Section.Name;

        NumbersDrawing = Unit.NumbersDrawings.ToString();

        TimeToDev = Unit.TimeToCreate.ToString();

        Descriptoin = Unit.Description;
        ProjectCode = Unit.ProjectCode;

        CheckBoxOld = Unit.IsOldVersion;

        StateHasChanged();

    }

    private async Task OnChange(bool value)
    {
        if (SelectedFiles is not null && SelectedFiles.Count > 0)
        {
            await FileService.SetFileOldAsync(SelectedFiles.FirstOrDefault().Id, value);
            await SetOldVersion.InvokeAsync(value);
        }
    }
    private async void RedirectToQuestions()
    {
        if (SelectedFiles.FirstOrDefault() is null)
        {
            return;
        }
        var existingQuest = await QuestionService.CheckItemByNameContainsStringAsync(SelectedFiles.FirstOrDefault()
        .Name.Substring(0, 6));
        if (existingQuest is null)
        {
            List<int> ids = new List<int>
            {
                Unit.Person.Id,
                Unit.Project.PersonId
            };


            QuestionDTO question = new QuestionDTO
                {
                    Title = $"обсуждение_{SelectedFiles.FirstOrDefault().Name.Substring(0, 6)}",
                    CreatorId = Unit.Project.PersonId,
                    IsDeleted = false,
                    ProjectId = Unit.ProjectId,
                    PersonIds = ids
                };
            var newQuest=await QuestionService.AddItemAsync(question);

            existingQuest = newQuest.Id.ToString();
        }
        navManager.NavigateTo($"/Questions/{existingQuest}");
    }
    /*void ShowTooltip(ElementReference elementReference, TooltipOptions options = null)
    { 
        tooltipService.Open(elementReference, genPhrase(), options); 
    }
    private string genPhrase()
    {
        var t = new Talks();
        Random rnd = new Random();
        int k = rnd.Next(0, 3);
        if (Developer.Equals("Евгений Смирнов"))
        {
            return t.Evg[k];
        }
        if (Developer.Equals("Вова Леонов"))
        {
            return t.Leo[k];
        }
        if (Developer.Equals("Дима Тихонов"))
        {
            return t.Tih[k];
        }
        if (Developer.Equals("Дарья Ефисько"))
        {
            return t.Ef[k];
        }
        return "??!";
    }*/
}
