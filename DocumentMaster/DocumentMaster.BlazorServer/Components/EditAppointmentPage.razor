@using DM.BLL.Services
@using Models
@inject DialogService DialogService
@inject PersonService PersonService


<RadzenTemplateForm TItem="ChallengeDTO" Data="@model" Submit=@OnSubmit>
<div class="row" style="margin-bottom: 16px">
    <div class="col-md-3">
        <RadzenLabel Text="Text" />
    </div>
    <div class="col">
        <RadzenTextBox @bind-Value="@model.Name" Name="Text" />
        <RadzenRequiredValidator Text="Title is required" Component="Text" />
    </div>
</div>
<div class="row" style="margin-bottom: 16px">
    <div class="col-md-3">
        <RadzenLabel Text="Start" />
    </div>
    <div class="col">
        <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" />
        <RadzenRequiredValidator Text="Start is required" Component="Start" />
    </div>
</div>
<div class="row" style="margin-bottom: 16px">
    <div class="col-md-3">
        <RadzenLabel Text="End" />
    </div>
    <div class="col">
        <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true" />
        <RadzenRequiredValidator Component="End" Text="End is required" />
    </div>
</div>
<div class="row">
    <div class="col-md-3">
         <RadzenButton Click="@(args=>Remove())" Icon="report" Text="Save" />
    </div>
    <div class="col">
        <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
    </div>
</div>
</RadzenTemplateForm>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private PersonDTO CurrentPerson { get; set; }

    [Parameter]
    public ChallengeDTO Appointment { get; set; }

    ChallengeDTO model = new ChallengeDTO();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        CurrentPerson = await PersonService.GetPersonByNameAsync(authState.User.Identity.Name);
    }

    protected override void OnParametersSet()
    {
        model = Appointment;
    }

    private void OnSubmit(ChallengeDTO model)
    {
        DialogService.Close(model);
    }
    private void Remove()
    {
        model.IsDeleted = true;
        DialogService.Close(model);
    }
}