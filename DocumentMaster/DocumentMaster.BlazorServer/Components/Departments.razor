@using DM.BLL.Services
@using DM.DAL.Models
@using Microsoft.EntityFrameworkCore
@using Models



@inject DepartmentService DepartmentService


<h3>Отделы</h3>

<AuthorizeView Roles="admin">
    <Authorized>
        <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" Text="Добавить"
                      Click="@InsertRow" Disabled=@(departmentToInsert != null) />

        <RadzenDataGrid @ref="DepartmentGrid" Data="@DepartmentsList" TItem="DepartmentDTO" AllowFiltering="false" AllowColumnResize="true"
                        PageSize="10" AllowPaging="true" AllowSorting="true" ColumnWidth="100px"
                        EditMode="DataGridEditMode.Single"
                        RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
            <Columns>
                <RadzenDataGridColumn TItem="DepartmentDTO" Property="Name" Title="Шифр" Width="10%">
                    <EditTemplate Context="section">
                        <RadzenTextBox @bind-Value="section.Name" Style="width:100%; display: block" Name="Name" />
                        <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="DepartmentDTO" Property="Description" Title="Название" Width="50%">
                    <EditTemplate Context="section">
                        <RadzenTextBox @bind-Value="section.Description" Style="width:100%; display: block"  Name="NameDiscr" />
                        <RadzenRequiredValidator Text="Description is required" Component="NameDiscr" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="DepartmentDTO" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                    <Template Context="sect">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(sect))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="sect">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(sect))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(sect))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="DepartmentDTO" Context="sect" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                    <Template Context="sect">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(sect))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="sect">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(sect))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public IList<DepartmentDTO> DepartmentsList { get; set; }

    private DepartmentDTO departmentToInsert { get; set; }

    RadzenDataGrid<DepartmentDTO> DepartmentGrid;

    protected override async void OnInitialized()
    {


    }

    async Task InsertRow()
    {
        departmentToInsert = new DepartmentDTO ();

        await DepartmentGrid.InsertRow(departmentToInsert);
    }

    async void OnUpdateRow(DepartmentDTO dep)
    {
        await DepartmentService.UpdateDepartmentAsync(dep);
        await DepartmentGrid.Reload();
    }

    async void OnCreateRow(DepartmentDTO dep)
    {
        var s =await DepartmentService.AddDepartmentAsync(dep);
        DepartmentsList.Add(s);
        await DepartmentGrid.Reload();
    }

    async Task EditRow(DepartmentDTO dep)
    {
        await DepartmentGrid.EditRow(dep);
    }

    async Task SaveRow(DepartmentDTO dep)
    {
        if (dep == departmentToInsert)
        {
            departmentToInsert = null;
        }

        await DepartmentGrid.UpdateRow(dep);
    }

    void CancelEdit(DepartmentDTO dep)
    {
        if (dep == departmentToInsert)
        {
            departmentToInsert = null;
        }
        DepartmentGrid.CancelEditRow(dep);
    }

    async Task DeleteRow(DepartmentDTO dep)
    {
        if (dep == departmentToInsert)
        {
            departmentToInsert = null;
        }

        await DepartmentService.DeleteDepartment(dep.Id);
        DepartmentsList.Remove(dep);

        await DepartmentGrid.Reload();

    }

}
