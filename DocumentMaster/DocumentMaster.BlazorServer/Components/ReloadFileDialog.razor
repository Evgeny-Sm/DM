@using DM.BLL.Services
@using DM.DAL.Models
@using Models
@using Microsoft.EntityFrameworkCore;

@inject DialogService DialogService
@inject FileService FileService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IWebHostEnvironment WebHostEnvironment
@inject IConfiguration Configuration



<RadzenCard Style="width: 100%; overflow: hidden;">
    <InputFile OnChange="@LoadFiles" multiple />
                  <br />
                  <br />
    <div>
        <RadzenButton Size="Radzen.ButtonSize.Small" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Text="Ok" Click=@(args => UploadFile()) />
    </div>
</RadzenCard>

@code {

    [Parameter]
    public IList<FileUnit> SelectedFiles { get; set; }

    private string FileName = string.Empty;

    private bool FileReadyToUpload { get; set; }
    private string Path { get; set; } = string.Empty;

    private IBrowserFile? BrowserFile { get; set; }

    protected override  void OnInitialized()
    {

    }

    protected override void OnParametersSet()
    {
        if (SelectedFiles != null)
        {
            FileName = SelectedFiles.FirstOrDefault().Name;
            Path = SelectedFiles.FirstOrDefault().PathFile;
        }
    }
    void OnChangeUpload(UploadChangeEventArgs args)
    {
        if (args.Files.Count() == 0)
        {
            FileReadyToUpload = false;
            return;
        }

        FileReadyToUpload = true;



    }
    private async Task UploadFile()
    { 
        if (!FileReadyToUpload)
        {
            await JS.InvokeVoidAsync("alert", "Выберите файл");
            return;
        }
        var fullPath = $"{WebHostEnvironment.WebRootPath}\\{Configuration.GetConnectionString("ProjectRootDir")}\\{Path}";
        
        await using FileStream fs = new(fullPath, FileMode.Create);

        await BrowserFile.OpenReadStream(maxAllowedSize: 100000000).CopyToAsync(fs);

        Navigation.NavigateTo("/Files");

    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        if (e.File is null)
        {
            FileReadyToUpload = false;
            return;
        }

        FileReadyToUpload = true;
        BrowserFile = e.File;
    }
}
