@using DM.BLL.Services
@using DM.DAL.Models
@using Models
@using Microsoft.EntityFrameworkCore;

@inject DialogService DialogService
@inject FileService FileService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IWebHostEnvironment WebHostEnvironment
@inject IConfiguration Configuration



<RadzenCard Style="width: 100%; overflow: hidden;">
    <InputFile OnChange="@LoadFiles" multiple />
                  <br />
                  <br />
    <div class="row">
        <div class="row mb-5">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Имя файла" />
            </div>
            <div class="col">
                <RadzenTextBox style="width: 100%;" @bind-Value="FileName" Name="NumbDr" />
            </div>
        </div>

        <div class="row mb-5">
            <div class="col-md-4">
                <RadzenLabel Text="Время на доработку(часов)" />
            </div>

            <div class="col-md-6">
                <RadzenTextBox style="width: 100%;" @bind-Value="AdditionalTime" Name="AddTime" />
            </div>
        </div>

        <div class="row mb-5">
            <div class="col-md-4">
                <RadzenLabel Text="Количество листов(в А4)" />
            </div>
            <div class="col-md-6">
                <RadzenTextBox style="width: 100%;" @bind-Value="NumbersDrawings" Name="NumbDr" />
            </div>
        </div>

        <div class="row mb-5">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Шифр" />
            </div>
            <div class="col">
                <RadzenTextBox style="width: 100%;" @bind-Value="Code" Name="NumbDr" />
            </div>
        </div>
        <div class="row mb-5">
            <div class="col-md-4 align-items-center d-flex">
                <RadzenLabel Text="Описание" />
            </div>
            <div class="col">
                <RadzenTextArea Style="width:inherit" @bind-Value="Description" Name="Description" />
            </div>
        </div>

    </div>
    <div>
        <RadzenButton Size="Radzen.ButtonSize.Small" Disabled=@IsSubmitting ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Text="Ok" Click=@(args => UploadFile()) />
    </div>
</RadzenCard>

@code {

    [Parameter]
    public IList<FileUnit> SelectedFiles { get; set; }

    private string FileName = string.Empty;

    private bool FileReadyToUpload { get; set; }

    private string Path { get; set; } = string.Empty;

    private string NumbersDrawings { get; set; } = string.Empty;

    private string Code { get; set; } = string.Empty;

    private string AdditionalTime { get; set; } = "0";

    private string IndexFile { get; set; } = string.Empty;
    private string Description { get; set; } = string.Empty;

    private FileDTO CurrentFile { get; set; } = new FileDTO();

    private IBrowserFile? BrowserFile { get; set; }
    private bool IsSubmitting;

    protected override  void OnInitialized()
    {

    }

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedFiles != null)
        {
            FileName = SelectedFiles.FirstOrDefault().Name.Substring(7);
            IndexFile = SelectedFiles.FirstOrDefault().Name.Remove(6);
            CurrentFile = await FileService.GetItemByIdAsync(SelectedFiles.FirstOrDefault().Id);
            NumbersDrawings = SelectedFiles.FirstOrDefault().NumbersDrawings.ToString();
            Code = SelectedFiles.FirstOrDefault().ProjectCode;
            Description = SelectedFiles.FirstOrDefault().Description;
        }
    }
    void OnChangeUpload(UploadChangeEventArgs args)
    {
        if (args.Files.Count() == 0)
        {
            FileReadyToUpload = false;
            return;
        }

        FileReadyToUpload = true;



    }
    private async Task UploadFile()
    { 
        if (IsSubmitting)
        {
            return;
        }

        try
        {
            IsSubmitting = true;

            CurrentFile.ProjectCode = Code;
            CurrentFile.Description = Description;

            CurrentFile.Name = IndexFile+"_"+FileName;

            CurrentFile.PathFile = $"{CurrentFile.ProjectId}/{IndexFile}_{FileName}";

            if (int.TryParse(NumbersDrawings, out int num))
            {
                CurrentFile.NumbersDrawings = num;
            }
            else
            {
                CurrentFile.NumbersDrawings = 0;
            }

            if (double.TryParse(AdditionalTime, out double t))
            {
                CurrentFile.TimeToCreate += t;
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Введите время на доработку в часах или 0");
                return;
            }

            if (FileReadyToUpload)
            {
                var fullPath = $"{WebHostEnvironment.WebRootPath}\\{Configuration.GetRequiredSection("ProjectRootDir").Value}\\{CurrentFile.PathFile}";

                await using FileStream fs = new(fullPath, FileMode.Create);

                await BrowserFile.OpenReadStream(maxAllowedSize: 100000000).CopyToAsync(fs);
            }
            else
            {             
                System.IO.File.Move($"{WebHostEnvironment.WebRootPath}\\{Configuration.GetRequiredSection("ProjectRootDir").Value}\\{SelectedFiles.FirstOrDefault().PathFile}",
                $"{WebHostEnvironment.WebRootPath}\\{Configuration.GetRequiredSection("ProjectRootDir").Value}\\{CurrentFile.PathFile}");                        
            }

            await FileService.UpdateFileAsync(CurrentFile);

            DialogService.Close();
        }
        finally
        {
            IsSubmitting = false;
        }

    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        if (e.File is null)
        {
            FileReadyToUpload = false;
            return;
        }

        FileReadyToUpload = true;
        BrowserFile = e.File;
        CurrentFile.Name = BrowserFile.Name;
    }
}
