@using DM.BLL.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.SignalR.Client
@using Models

@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject ProtectedSessionStorage sessionStorage
@inject PersonService PersonService
@inject NoteService NoteService
@inject IConfiguration configuration
@inject IWebHostEnvironment env
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService

@implements IAsyncDisposable


<AuthorizeView>
    <Authorized>

        <div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" id="chatContainer" style="height:550px">
            @if (!userMessages.Any())
            {
                <p style="color:gray"> No messages </p>
            }
            @foreach (var userMessage in userMessages)
            {
                @if (userMessage.HasFile)
                {
                    <RadzenCard Class="rz-background-color-primary-light rz-shadow-0 border-0 rz-p-8" Style="width: 250px" ContextMenu=@(args => ShowContextMenuWithItems(args, userMessage))>
                        <div class="card shadow @(userMessage.IsCurrentUser? "color-green mr-5":"color-blue mr-5")" style="width: 12rem;font-size:small">
                            <div class="card-header justify-content-end">
                                @(userMessage.IsCurrentUser ? "Я" : @userMessage.UserName)
                            </div>
                            <div>
                                <RadzenImage Path="@userMessage.Path" Style="width:500px; height:auto" />
                            </div>
                            <div class="card-footer">
                                <span class="small justify-content-end">@userMessage.DateTime.ToString("HH:mm| MMM:dd")</span>
                            </div>
                        </div>
                    </RadzenCard>
                    <br />

                }
                else
                {

                    <div class="row mb-3 d-flex @(userMessage.IsCurrentUser? "justify-content-end":"")">
                        <RadzenCard Class="rz-background-color-primary-light rz-shadow-0 border-0 rz-p-8" Style="width: 250px" ContextMenu=@(args => ShowContextMenuWithItems(args, userMessage))>
                            <div class="card shadow @(userMessage.IsCurrentUser? "color-green mr-5":"color-cornflowerblue mr-5")" style="width: 12rem;font-size:small">
                                <div class="card-header">
                                    @(userMessage.IsCurrentUser ? "Я" : @userMessage.UserName)
                                </div>
                                <ul class="list-group">
                                    <li class="list-group-item @(userMessage.IsCurrentUser? "color-green":"color-cornflowerblue")">
                                        @userMessage.Content
                                    </li>
                                </ul>
                                <div class="card-footer">
                                    <span class="small justify-content-end">@userMessage.DateTime.ToString("HH:mm| MMM:dd")</span>
                                </div>
                            </div>
                        </RadzenCard>
                    </div>
                    <br />

                }

            }
            <div style="vertical-align:bottom; position:static">
                <Dropzone CurrentPerson="@CurrentPerson" QuestionId="@CurrentQuestion.Id" PathLoadedCallBack="@SetPath" />
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-9">
                    <textarea @bind="messageInput" type="text" class="form-control" placeholder="Start typing..."> </textarea>
                </div>
                <div class="col-3">
                    <button type="button" @onclick="Send" class="btn btn-primary"> send</button>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    [Parameter]
    public QuestionDTO CurrentQuestion { get; set; }

    private PersonDTO CurrentPerson { get; set; } = new();
    private HubConnection hubConnection;
    private List<NoteDTO> userMessages = new List<NoteDTO>();
    private string messageInput;
    private string userNameInput { get; set; }


    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;

        var authState = await authenticationState;
        CurrentPerson = await PersonService.GetPersonByNameAsync(authState.User.Identity.Name);
        hubConnection = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/notehub"))
       .Build();
        hubConnection.On<int, string, string, string, int>("ReceiveNote", (questId, user, message, fileName, noteId) =>
     {
         if (questId == CurrentQuestion.Id)
         {
             userMessages.Add(new NoteDTO
                 {
                     Id = noteId,
                     UserName = user,
                     Content = message,
                     IsCurrentUser = user == CurrentPerson.UserName,
                     DateTime = DateTime.Now,
                     Path = $"/{configuration.GetRequiredSection("PathToQuestPictures").Value}/{questId.ToString()}/{fileName}",
                     HasFile = !string.IsNullOrEmpty(fileName)
                 });
             InvokeAsync(StateHasChanged);
         }

     });
        await hubConnection.StartAsync();


    }
    protected override async Task OnParametersSetAsync()
    {
        await CompareMes();
    }


    private async Task Send()
    {
        if (!string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", CurrentQuestion.Id, CurrentPerson.UserName, messageInput, string.Empty);
            messageInput = string.Empty;
        }
        await JS.InvokeAsync<string>("ScrollToBottom", "chatContainer");
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    private async Task CompareMes()
    {
        var messages = await NoteService.GetItemsByQuestionIdAsync(CurrentQuestion.Id);
        foreach (var mes in messages)
        {
            mes.IsCurrentUser = mes.UserName == CurrentPerson.UserName;
            mes.PersonIds.Add(CurrentPerson.Id);
            mes.PersonIds = mes.PersonIds.Distinct().ToList();
            if (mes.HasFile)
            {
                mes.Path = $"/{configuration.GetRequiredSection("PathToQuestPictures").Value}/{CurrentQuestion.Id.ToString()}/{mes.Path}";
            }
            await NoteService.UpdateItemAsync(mes);
        }
        userMessages = messages.ToList();
    }
    private async Task SetPath(string fileName)
    {
        if (!String.IsNullOrEmpty(fileName))

            await hubConnection.SendAsync("SendMessage", CurrentQuestion.Id, CurrentPerson.UserName, string.Empty, fileName);

    }
    void someVoid()
    {
    }

    void ShowContextMenuWithItems(MouseEventArgs args, object note)
    {
        NoteDTO currentNote = (NoteDTO)note;

        if (currentNote.IsCurrentUser && !currentNote.HasFile)
            ContextMenuService.Open(args,
                new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Remove", Value = new ContextMenuItemDTO(1,currentNote.Id) },
                     }, OnMenuItemClick);

        if (currentNote.IsCurrentUser && currentNote.HasFile)
            ContextMenuService.Open(args,
                new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Open", Value = new ContextMenuItemDTO(2,currentNote.Id) },
                new ContextMenuItem(){ Text = "Remove", Value = new ContextMenuItemDTO(1,currentNote.Id) },
                     }, OnMenuItemClick);

        if (!currentNote.IsCurrentUser && currentNote.HasFile)
            ContextMenuService.Open(args,
                new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Open", Value = new ContextMenuItemDTO(2,currentNote.Id) },               
                         }, OnMenuItemClick);
    }

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        ContextMenuItemDTO menuItem = (ContextMenuItemDTO)args.Value;
        if (menuItem.menuNumber.Equals(1))
        {
            NoteService.RemoveItemAsync(menuItem.noteId);
            ContextMenuService.Close();
            userMessages.Remove(userMessages.Where(n => n.Id == menuItem.noteId).Single());
            StateHasChanged();
        }

        if (menuItem.menuNumber.Equals(2))
        {
            OpenPictureDialog(userMessages.Where(n => n.Id == menuItem.noteId).Single().Path);
            ContextMenuService.Close();

        }
    }

    private async Task OpenPictureDialog(string path)
    {
        await DialogService.OpenAsync<OpenPictureDialog>($"picture",
              new Dictionary<string, object>() { { "Path", path } },
              new DialogOptions()
                  {
                      Width = "1000px",
                      Height = "1000px",
                      Resizable = true,
                      Draggable = false,
                      CloseDialogOnOverlayClick = true
                  });
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {

    }

    void Close(dynamic result)
    {

        Dispose();
    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }

    private struct ContextMenuItemDTO
    {
        public int menuNumber;
        public int noteId;
        public ContextMenuItemDTO(int num, int id)
        {
            menuNumber = num;
            noteId = id;
        }

    }

}
