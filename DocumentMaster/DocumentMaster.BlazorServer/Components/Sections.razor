
@using DM.BLL.Services
@using DM.DAL.Models
@using Microsoft.EntityFrameworkCore
@using Models


@inject DMContext db
@inject SectionService SectionService

<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />


<h3>Sections</h3>

<AuthorizeView Roles="admin">
    <Authorized>
        <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Добавить" 
        Click="@InsertRow" Disabled=@(sectionToInsert != null) />

        <RadzenDataGrid @ref="SectionGrid" Data="@SectionsList" TItem="Section" AllowFiltering="false" AllowColumnResize="true"
                        PageSize="10" AllowPaging="true" AllowSorting="true" ColumnWidth="100px"
                        EditMode="DataGridEditMode.Single"
                        RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
            <Columns>
                <RadzenDataGridColumn TItem="Section" Property="Name" Title="Шифр">
                    <EditTemplate Context="section">
                        <RadzenTextBox @bind-Value="section.Name" Style="width:100%; display: block" Name="Name" />
                        <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Section" Property="Description" Title="Название">
                    <EditTemplate Context="section">
                        <RadzenTextBox @bind-Value="section.Description" Style="width:100%; display: block" Name="NameDiscr" />
                        <RadzenRequiredValidator Text="Description is required" Component="NameDiscr" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Section" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                    <Template Context="sect">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(sect))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="sect">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(sect))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(sect))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Section" Context="sect" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                    <Template Context="sect">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(sect))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="sect">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(sect))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

    </Authorized>
</AuthorizeView>

@code {

    private IList<SectionDTO> SectionsList { get; set; }

    private SectionDTO sectionToInsert { get; set; }

    RadzenDataGrid<Section> SectionGrid;

    protected override  void OnInitialized()
    {
        SectionsList = db.Sections.ToList();
    }

    async Task InsertRow()
    {
        sectionToInsert = new Section { Name="name"};

        await SectionGrid.InsertRow(sectionToInsert);
    }

    async void OnUpdateRow(Section section)
    {
        var r=db.Sections.Update(section);
        await SectionGrid.Reload();
    }

    async Task OnCreateRow(Section section)
    {
        await db.Sections.AddAsync(section);
        await SectionGrid.InsertRow(sectionToInsert);
    }

    async Task EditRow(Section section)
    {
        await SectionGrid.EditRow(section);
    }

    async Task SaveRow(Section section)
    {
        if (section == sectionToInsert)
        {
            sectionToInsert = null;
        }

        await SectionGrid.UpdateRow(section);
    }

    void CancelEdit(Section section)
    {
        if (section == sectionToInsert)
        {
            sectionToInsert = null;
        }
        SectionGrid.CancelEditRow(section);
    }

    async Task DeleteRow(Section section)
    {
        if (section == sectionToInsert)
        {
            sectionToInsert = null;
        }

        db.Sections.Remove(section);

        await SectionGrid.Reload();

    }




}
