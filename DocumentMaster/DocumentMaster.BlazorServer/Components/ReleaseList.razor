@using DM.BLL.Services
@using DM.DAL.Models
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.EntityFrameworkCore
@using Models

@inject PersonService PersonService
@inject ReleaseService ReleaseService
@implements IDisposable
@inject DialogService DialogService

<AuthorizeView>
    <Authorized>
        <div class="start-0">
            <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" Text="Добавить"
                          Click="@InsertRelease" />
        </div>
        <RadzenDataGrid Data="@Releases" TItem="ReleaseDTO" ValueChanged="@(args=>ValueChanged(args))" AllowVirtualization="true" Style="height:300px"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And"
                        AllowSorting="true">
            <Columns>
                <RadzenDataGridColumn TItem="ReleaseDTO" Property="Id" Title="Id" Width="22px" />
                <RadzenDataGridColumn TItem="ReleaseDTO" Property="ProjectCode" Title="шифр" Width="60px" />
                <RadzenDataGridColumn TItem="ReleaseDTO" Property="PersonName" Title="создал" Width="40px" />
                <RadzenDataGridColumn TItem="ReleaseDTO" Property="CreateDate" Title="дата" Width="45px" />
                <RadzenDataGridColumn TItem="ReleaseDTO" Title="файлы" Width="45px">
                    <Template Context="release">
                        <RadzenButton Size="ButtonSize.Small" Text="files" ButtonStyle="ButtonStyle.Secondary" Click=@(()=>SelectFilesDialog(release)) />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ReleaseDTO" Title="state" Width="45px">
                    <Template Context="stat">
                        @if (stat.IsLocked)
                        {
                            <RadzenButton Size="ButtonSize.Small" Text="locked" ButtonStyle="ButtonStyle.Primary" Click=@(()=>LockRelease(stat)) />
                        }

                        else
                        {
                            <RadzenButton Size="ButtonSize.Small" Text="unlocked" ButtonStyle="ButtonStyle.Secondary" Click=@(()=>LockRelease(stat)) />
                        }
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    [Parameter]
    public List<ReleaseDTO> Releases { get; set; } = new List<ReleaseDTO>();
    [Parameter]
    public int ProjectId { get; set; }
    private PersonDTO CurrentPerson { get; set; } = new();
    private int CurrentReleaseId { get; set; }
    private bool DataChanged { get; set; }

    private ReleaseDTO releaseToInsert { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;

        CurrentPerson = await PersonService.GetPersonByNameAsync(authState.User.Identity.Name);
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;

    }

    private void ValueChanged(IList<ReleaseDTO> args)
    {

    }
    private string GetName()
    {
        return string.Empty;
    }
    private async Task SelectFilesDialog(ReleaseDTO release)
    {
        List<int> ids = await DialogService.OpenAsync<SelectFilesDialog>($"Файлы на выпуск",
              new Dictionary<string, object>() { { "Release", release } },
              new DialogOptions()
                  {
                      Width = "1050px",
                      Height = "750px",
                      Resizable = true,
                      Draggable = false,
                      CloseDialogOnOverlayClick = true
                  });
        if (ids != null)
        {
            release.FilesIds = ids;
            DataChanged = true;
            await ReleaseService.UpdateItemAsync(release);
        }

    }

    private async Task LockRelease(ReleaseDTO release)
    {
        if (release.MainIngId == CurrentPerson.Id)
        {
            release.IsLocked = !release.IsLocked;
            await ReleaseService.LockUnlockItem(release);
        }
    }

    private async Task InsertRelease()
    {
        releaseToInsert = await DialogService.OpenAsync<NewReleaseDialog>($"выпуск",
              new Dictionary<string, object>() { },
              new DialogOptions()
                  {
                      Width = "800px",
                      Height = "600px",
                      Resizable = true,
                      Draggable = false,
                      CloseDialogOnOverlayClick = true
                  });
        releaseToInsert.PersonId = CurrentPerson.Id;
        releaseToInsert.ProjectId = ProjectId;
        var rel = await ReleaseService.AddItemAsync(releaseToInsert);
        Releases.Add(rel);



    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {

    }
    void Close(dynamic result)
    {

        Dispose();
    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }
}
