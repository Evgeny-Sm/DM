@attribute [Authorize]

@using Models
@using DM.BLL.Services

@implements IDisposable

@inject PersonService PersonService
@inject ProjectService ProjectService
@inject FileService FileService
@inject QuestionService QuestionService
@inject IWebHostEnvironment WebHostInvironment
@inject IConfiguration Configuration
@inject IJSRuntime JS
@inject DialogService DialogServices


<AuthorizeView Roles="user">
    <Authorized>
        <RadzenTabs SelectedIndex="0">
            <Tabs>
                <RadzenTabsItem Text="Данные">
                    <div class="row">
                        <div class="col-6">
                            <b>Создал: @Developer   </b>
                            <div>Дата создания: @DateToCreate</div>
                            <div>Проект: @ProjectName</div>
                        </div>
                        @if (CurrentQuestion is not null)
                        {
                            <div class="col-6 d-inline-block">
                                <div class="row">
                                    <div class="col-6 d-inline-block">
                                        <RadzenCheckBox @bind-Value=@CheckBox Name="CheckBox1" TValue="bool" Change=@(args => OnChangeCheckBox(args)) />
                                        <RadzenLabel Text="Отслеживать" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-6 d-inline-block">
                                        <RadzenCheckBox @bind-Value=@CheckBoxToDo Name="CheckBox2" TValue="bool" Change=@(args => OnChangeCheckBoxToDo(args)) />
                                        <RadzenLabel Text="В работу" Component="CheckBox2" Style="margin-left: 8px; vertical-align: middle;" />
                                    </div>
                                </div>

                            </div>
                        }
                    </div>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Участники">
                    @foreach (var p in Participants)
                    {
                        <span style="color:cornflowerblue"> @p.LastName @p.FirstName.Substring(0,1) | </span>
                    }
                </RadzenTabsItem>

                <RadzenTabsItem Text="Файлы">

                    <div class="row">
                        <div class="col-md-9">
                            @foreach (var f in Files)
                            {
                                <RadzenButton Variant="Variant.Text" Click=@(args => OnClickToFile(f)) Text="@f.ToString()" ButtonStyle="ButtonStyle.Secondary" />
                            }
                        </div>
                        <div class="col-md-3">
                            <RadzenTextBox Style="width:100%" Placeholder="..номер файла" Change="@((args)=>Find(args))" Name="Text" />
                        </div>
                    </div>

                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="admin,head">
    <Authorized>
        <RadzenTabs SelectedIndex="0">
            <Tabs>
                <RadzenTabsItem Text="Данные">
                    <div class="row">
                        <div class="col-6">
                            <b>Создал: @Developer   </b>
                            <div>Дата создания: @DateToCreate</div>
                            <div>Проект: @ProjectName</div>
                        </div>
                        @if (CurrentQuestion is not null)
                        {
                            <div class="col-6">
                                <div class="row">
                                    <div class="col-6 d-inline-block">
                                        <RadzenCheckBox @bind-Value=@CheckBox Name="CheckBox1" TValue="bool" Change=@(args => OnChangeCheckBox(args)) />
                                        <RadzenLabel Text="Отслеживать" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-6 d-inline-block">
                                        <RadzenCheckBox @bind-Value=@CheckBoxToDo Name="CheckBox2" TValue="bool" Change=@(args => OnChangeCheckBoxToDo(args)) />
                                        <RadzenLabel Text="В работу" Component="CheckBox2" Style="margin-left: 8px; vertical-align: middle;" />
                                        <RadzenButton Style="position:absolute; right:1px" Click=@(args => OnClickAddToDo()) Icon="add_circle_outline" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" />
                                    </div>
                                </div>

                            </div>
                        }
                    </div>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Участники">
                    @foreach (var p in Participants)
                    {
                        <span style="color:cornflowerblue"> @p.LastName @p.FirstName.Substring(0,1) | </span>
                    }
                </RadzenTabsItem>

                <RadzenTabsItem Text="Файлы">

                    <div class="row">
                        <div class="col-md-9">
                            @foreach (var f in Files)
                            {
                                <RadzenButton Variant="Variant.Text" Click=@(args => OnClickToFile(f)) Text="@f.ToString()" ButtonStyle="ButtonStyle.Secondary" />
                            }
                        </div>
                        <div class="col-md-3">
                            <RadzenTextBox Style="width:100%" Placeholder="..номер файла" Change="@((args)=>Find(args))" Name="Text" />
                        </div>
                    </div>

                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </Authorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public QuestionDTO CurrentQuestion { get; set; }
    [Parameter]
    public EventCallback<bool> ToDoStatus { get; set; }

    private PersonDTO CurrentPerson { get; set; } = new();

    private string Developer { get; set; } = string.Empty;

    private string DateToCreate { get; set; } = string.Empty;

    private string ProjectName { get; set; } = string.Empty;

    private IEnumerable<PersonDTO> PersonDTOs = new List<PersonDTO>();

    private IEnumerable<ProjectDTO> ProjectDTOs = new List<ProjectDTO>();

    private List<PersonDTO> Participants = new();

    private List<int> Files { get; set; } = new();

    private bool CheckBox { get; set; }
    private bool CheckBoxToDo { get; set; }

    protected override async void OnInitialized()
    {
        var authState = await authenticationState;
        PersonDTOs = await PersonService.GetAllPersonsAsync();
        CurrentPerson = PersonDTOs.Where(p => p.UserName == (authState.User.Identity.Name)).Single();

        ProjectDTOs = await ProjectService.GetProjectsListAsync();
        DialogServices.OnOpen += Open;
        DialogServices.OnClose += Close;

    }

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentQuestion is not null && !string.IsNullOrEmpty(CurrentQuestion.Title))
        {
            var per = PersonDTOs.Where(p => p.Id == CurrentQuestion.CreatorId).Single();
            Developer = $"{per.LastName} {per.FirstName}";

            DateToCreate = CurrentQuestion.DateTime.ToString("HH:mm|dd:MMM:yy");
            ProjectName = ProjectDTOs.Where(p => p.Id == CurrentQuestion.ProjectId).Single().Name;
            Participants = PersonDTOs.Where(p => CurrentQuestion.PersonIds.Contains(p.Id) || p.Id == CurrentQuestion.CreatorId).ToList();
            Files = CurrentQuestion.FileUnitsId;
            CheckBox = CurrentQuestion.PersonIds.Contains(CurrentPerson.Id);
            CheckBoxToDo = CurrentQuestion.IsDoing;
        }


    }
    private async Task OnClickToFile(int id)
    {
        var file = await FileService.GetItemByIdAsync(id);
        if (file != null)
        {
            var name = file.Name;
            var downloadPath = WebHostInvironment.WebRootPath + Configuration.GetRequiredSection("ProjectRootDir").Value
            + $"\\{file.ProjectId}" + $"\\{name}";

            var fileStream = File.OpenRead(@$"{downloadPath}");

            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", name, streamRef);
        }

    }
    private async Task OnChangeCheckBox(bool args)
    {
        if (args)
        {
            CurrentQuestion.PersonIds.Add(CurrentPerson.Id);
            await QuestionService.UpdateItemAsync(CurrentQuestion);
        }
        else
        {
            var b = CurrentQuestion.PersonIds.Remove(CurrentPerson.Id);
            if (b)
            {
                await QuestionService.UpdateItemAsync(CurrentQuestion);
            }
        }

    }

    private async Task OnChangeCheckBoxToDo(bool args)
    {
        await QuestionService.ChangeToDoStatusAsync(args, CurrentQuestion.Id, CurrentPerson.Id);
        await ToDoStatus.InvokeAsync(args);
    }

    private async Task Find(string args)
    {
        if (CurrentQuestion is not null && !string.IsNullOrEmpty(CurrentQuestion.Title))
        {
            if (int.TryParse(args, out int t))
            {
                if (CurrentQuestion.FileUnitsId.Contains(t))
                {
                    CurrentQuestion.FileUnitsId.Remove(t);
                    await QuestionService.UpdateItemAsync(CurrentQuestion);
                }
                else
                {
                    var exist = await FileService.Exist(t);
                    if (exist)
                    {
                        CurrentQuestion.FileUnitsId.Add(t);
                        await QuestionService.UpdateItemAsync(CurrentQuestion);

                    }
                }
            }
        }

    }
    private async Task OnClickAddToDo()
    { 
        IList<PersonDTO> data = await DialogServices.OpenAsync<AddPersonsToWorkDialog>("Add another person", new Dictionary<string, object>(),
      new DialogOptions()
          {
              Width = "400px",
              Height = "300px",
              Resizable = true,
              Draggable = false,
              CloseDialogOnOverlayClick = false
          });

        if (data!=null && data.Count>0)
        {
            foreach (var p in data)
            { 
                await QuestionService.ChangeToDoStatusAsync(true, CurrentQuestion.Id, p.Id);
            }
        }
    }
    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {

    }

    void Close(dynamic result)
    {
        Dispose();
    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogServices.OnOpen -= Open;
        DialogServices.OnClose -= Close;
    }
}
