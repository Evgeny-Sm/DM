@attribute [Authorize]

@using Models
@using DM.BLL.Services


@inject PersonService PersonService
@inject ProjectService ProjectService
@inject FileService FileService
@inject QuestionService QuestionService
@inject IWebHostEnvironment WebHostInvironment
@inject IConfiguration Configuration
@inject IJSRuntime JS


<RadzenTabs SelectedIndex="0">
    <Tabs>
        <RadzenTabsItem Text="Данные">
            <div class="row">
                <div class="col-6">
                    <b>Создал: @Developer   </b>
                    <div>Дата создания: @DateToCreate</div>
                    <div>Проект: @ProjectName</div>
                </div>
                @if (CurrentQuestion is not null)
                {
                    <div class="col-6 d-inline-block">
                        <RadzenCheckBox @bind-Value=@CheckBox Name="CheckBox1" TValue="bool" Change=@(args => OnChangeCheckBox(args)) />
                        <RadzenLabel Text="Отслеживать" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                    </div>
                }
            </div>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Участники">
            @foreach(var p in Participants)
            {
                <span style="color:cornflowerblue"> @p.LastName @p.FirstName.Substring(0,1) | </span>
            }
        </RadzenTabsItem>

        <RadzenTabsItem Text="Файлы">
            @foreach(var f in Files)
            {
                <RadzenButton Variant="Variant.Text" Click=@(args => OnClickToFile(f)) Text="@f.ToString()" ButtonStyle="ButtonStyle.Secondary" /> 
            }                      
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public QuestionDTO CurrentQuestion { get; set; }

    private PersonDTO CurrentPerson { get; set; } = new();

    private string Developer { get; set; } = string.Empty;

    private string DateToCreate { get; set; } = string.Empty;

    private string ProjectName { get; set; } = string.Empty;

    private IEnumerable<PersonDTO> PersonDTOs = new List<PersonDTO>();

    private IEnumerable<ProjectDTO> ProjectDTOs = new List<ProjectDTO>();

    private List<PersonDTO> Participants = new();

    private List<int> Files { get; set; } = new();

    private bool CheckBox { get; set; }

    protected override async void OnInitialized()
    {
        var authState = await authenticationState;
        PersonDTOs = await PersonService.GetPersonsAsync();
        CurrentPerson = PersonDTOs.Where(p=>p.UserName==(authState.User.Identity.Name)).Single();

        ProjectDTOs = await ProjectService.GetProjectsListAsync();

    }

    protected override void OnParametersSet()
    {
        if (CurrentQuestion is not null && !string.IsNullOrEmpty(CurrentQuestion.Title))
        {
            var per = PersonDTOs.Where(p => p.Id == CurrentQuestion.CreatorId).Single();
            Developer = $"{per.LastName} {per.FirstName}";

            DateToCreate = CurrentQuestion.DateTime.ToString("HH:mm|dd:MMM:yy");
            ProjectName = ProjectDTOs.Where(p => p.Id == CurrentQuestion.ProjectId).Single().Name;
            Participants = PersonDTOs.Where(p => CurrentQuestion.PersonIds.Contains(p.Id) || p.Id==CurrentQuestion.CreatorId).ToList();
            Files = CurrentQuestion.FileUnitsId;
            CheckBox = CurrentQuestion.PersonIds.Contains(CurrentPerson.Id);
        }


    }
    private async Task OnClickToFile(int id)
    {
        var file = await FileService.GetItemByIdAsync(id);
        if (file != null)
        {
            var name = file.Name;
            var downloadPath = WebHostInvironment.WebRootPath + Configuration.GetRequiredSection("ProjectRootDir").Value
                                + $"\\{file.ProjectId}" + $"\\{name}";

            var fileStream = File.OpenRead(@$"{downloadPath}");

            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", name, streamRef);
        }

    }
    private async Task OnChangeCheckBox(bool args)
    {
        if (args)
        {
            CurrentQuestion.PersonIds.Add(CurrentPerson.Id);
            await QuestionService.UpdateItemAsync(CurrentQuestion);
        }
        else
        {
            var b=CurrentQuestion.PersonIds.Remove(CurrentPerson.Id);
            if (b)
            { 
                await QuestionService.UpdateItemAsync(CurrentQuestion);
            }
        }

    }
}
