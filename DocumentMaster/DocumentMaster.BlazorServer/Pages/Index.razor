@page "/"
@using DocumentMaster.BlazorServer.Services
@using Models
@using System.IO

@attribute [Authorize]

@inject NavigationManager Navigation

@inject IConfiguration Configuration
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@inject IJSRuntime JS


<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />


<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>
<h1>@HttpContextAccessor.HttpContext.User.Identity.IsAuthenticated.ToString()</h1>

<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity.Name!</h1>
    </Authorized>
    <NotAuthorized>
        <h1>Hello, Guest!</h1>
    </NotAuthorized>
</AuthorizeView>

Welcome to your new app.



<SurveyPrompt Title="How is Blazor working for you?" />

<AuthorizeView>
    <Authorized>
        <br /><br />
        <button class="btn btn-btn-outline-primary" @onclick="DisplayGreetingAlert">Display Greeting Alert</button>
    </Authorized>
</AuthorizeView>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    RadzenUpload upload;
    int progress;
    string info;
    string Nname;
    bool showProgress;
    bool showComplete;


    private async Task DisplayGreetingAlert()
    {
        var authState = await authenticationState;
        var message = $"Hello {authState.User.Identity.Name}";
        await JS.InvokeVoidAsync("alert", message);
    }

    void OnProgress(UploadProgressArgs args, string name)
    {
        this.info = $"%'{name}'/{args.Loaded} of {args.Total} bytes";
        this.progress = args.Progress;
    }
    async void Download()
    {
        var req = new ApiRequestService<FileDTO>(Configuration, HttpContextAccessor);
        var resp = req.CreateAuthRequest("/Download/4", HttpMethod.Get);
        var bytes = await resp.Result.Content.ReadAsByteArrayAsync();
        var fileStream = new MemoryStream(bytes);
        var fileName = "1.pdf";
        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

    }

}