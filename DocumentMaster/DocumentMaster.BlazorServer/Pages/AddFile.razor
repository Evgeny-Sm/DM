@page "/AddFile"

@attribute [Authorize(Roles="admin")]

@using DM.BLL.Services
@using DocumentMaster.BlazorServer.Authentication
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Models


@inject FileService fileService
@inject DepartmentService departmentService
@inject PersonService personService
@inject ProjectService projectService
@inject DialogService DialogService
@inject NavigationManager Navigation
@inject ProtectedSessionStorage sessionStorage
@inject IJSRuntime JS
@inject AuthenticationStateProvider _provider



<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

@if (Projects == null)
{
    <div>Loading...</div>
}
else
{
    <AuthorizeView>
    <Authorized>
        <h3>Добавление файла</h3>
        <RadzenTemplateForm Context="Context1" Data="@_file" Submit="@((FileDTO args) => { Submit(args);})">
            <div class="row">
                <div class="col-md-10">
                        <RadzenFieldset Text="Выберите проект">
                            <div class="row">
                                <div class="col-md-4 ">
                                    <RadzenDropDownDataGrid TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                        Data=@(Projects) Style="width: 100%" AllowColumnResize="true"
                                                        TextProperty="Name" ValueProperty="Id" AllowFilteringByAllStringColumns="true"
                                                        Change=@(args => OnChange(args, "DropDownDataGrid with filtering by all string columns"))>
                                        <Columns>
                                            <RadzenDropDownDataGridColumn Property="Id" Title="ID" Width="100px" />
                                            <RadzenDropDownDataGridColumn Property="Name" Title="Name" Width="200px" />
                                        </Columns>
                                    </RadzenDropDownDataGrid>
                                </div>
                            </div>
                        </RadzenFieldset>
                        <br>
                        <RadzenFieldset Text="Название файла">
                            <div class="row">
                                <div class="col-md-4">
                                    <RadzenTextBox style="width: 100%;" @bind-Value="_file.Name" Name="FileName" />
                                </div>
                            </div>
                        </RadzenFieldset>

                    
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" style="display: inline-block; margin-left: 10px;" Text="Save" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
                </div>
            </div>
        </RadzenTemplateForm>
        </Authorized>
</AuthorizeView>
}


@code {

    private AuthenticationState authState { get; set; }

    private FileDTO _file = new FileDTO();
    private PersonDTO CurrentPerson { get; set; }
    private IList<ProjectDTO> Projects { get; set; }
    private string Name { get; set; }


    protected override async void OnInitialized()
    {
        CurrentPerson = new PersonDTO();
        authState = await _provider.GetAuthenticationStateAsync();
        CurrentPerson = await personService.GetPersonByNameAsync(authState.User.Identity.Name);
        var p= await projectService.GetProjectsListAsync();
        Projects = p.ToList();
        Name = Projects.First().Name;
        StateHasChanged();

    }

    async void Submit(FileDTO arg)
    {
        CurrentPerson = await personService.GetPersonByNameAsync(authState.User.Identity.Name);
        arg.DepartmentId = CurrentPerson.DepartmentId;
        var result= await fileService.AddFileAsync(arg,CurrentPerson.Id);

        if (result != null)
        {
            Navigation.NavigateTo("/Files");
        }

    }


    void OnChange(object value, string s)
    {
        _file.ProjectId = (int)value;
        Name = value.ToString();
    }

        void Cancel()
    {
        //
    }


}
