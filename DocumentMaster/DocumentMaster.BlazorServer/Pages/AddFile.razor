@page "/AddFile"

@attribute [Authorize]

@using DM.BLL.Services
@using DocumentMaster.BlazorServer.Authentication
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Models


@inject FileService fileService
@inject DepartmentService departmentService
@inject PersonService personService
@inject ProjectService projectService
@inject SectionService sectionService
@inject DialogService DialogService
@inject NavigationManager Navigation
@inject ProtectedSessionStorage sessionStorage
@inject IJSRuntime JS




<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

@if (Projects == null)
{
    <div>Loading...</div>
}
else
{
    <AuthorizeView>
    <Authorized>
        <h3>Добавление файла</h3>
        <RadzenTemplateForm Context="Context1" Data="@_file" Submit="@((FileDTO args) => { Submit(args);})">
            <div class="row">
                <div class="col-md-10">
                        <RadzenFieldset Text="Выберите проект">
                            <div class="row">
                                <div class="col-md-4 ">
                                    <RadzenDropDownDataGrid TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                        Data=@(Projects) Style="width: 100%" AllowColumnResize="true"
                                                        TextProperty="Name" ValueProperty="Id" AllowFilteringByAllStringColumns="true"
                                                        Change=@(args => OnChange(args, "DropDownDataGrid with filtering by all string columns"))>
                                        <Columns>
                                            <RadzenDropDownDataGridColumn Property="Id" Title="ID" Width="100px" />
                                            <RadzenDropDownDataGridColumn Property="Name" Title="Name" Width="200px"/>                                          
                                        </Columns>
                                    </RadzenDropDownDataGrid>
                                </div>
                            </div>
                        </RadzenFieldset>

                        <RadzenFieldset Text="Выберите раздел проекта">
                            <div class="row">
                                <div class="col-md-4 ">
                                    <RadzenDropDownDataGrid TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                        Data=@(SectionsList) Style="width: 100%" AllowColumnResize="true"
                                                        TextProperty="Name" ValueProperty="Id" AllowFilteringByAllStringColumns="true"
                                                        Change=@(args => OnChangeSection(args, "DropDownDataGrid with filtering by all string columns"))>
                                        <Columns>
                                            <RadzenDropDownDataGridColumn Property="Name" Title="Name" Width="50px" />
                                            <RadzenDropDownDataGridColumn Property="Description" Title="FullName" Width="200px" />
                                        </Columns>
                                    </RadzenDropDownDataGrid>
                                </div>
                            </div>
                        </RadzenFieldset>
                        <RadzenFieldset Text="Название файла">
                            <div class="row">
                                <div class="col-md-4">
                                    <RadzenTextBox style="width: 100%;" @bind-Value="_file.Name" Name="FileName" />
                                </div>
                                <div class="col-md-4">
                                    <RadzenUpload @ref="upload" Auto="false" Multiple="false" Url=@($"upload?id={ProjectId}&fileName={_file.Name}")                                  
                                    Change=@(args => OnChangeUpload(args, "Manual Upload"))/>
                                </div>
                            </div>
                        </RadzenFieldset>

                        <RadzenFieldset Text="Количество листов в файле">
                            <div class="row">
                                <div class="col-md-4">
                                    <RadzenTextBox style="width: 100%;" @bind-Value="NumbersDrawings" Name="NumbDr" />
                                </div>
                            </div>
                        </RadzenFieldset>

                        <RadzenFieldset Text="Время на разработку(часов)">
                            <div class="row">
                                <div class="col-md-4">
                                    <RadzenTextBox style="width: 100%;" @bind-Value="TimeToDevelop" Name="TimeToDev" />
                                </div>
                            </div>
                        </RadzenFieldset>

                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" style="display: inline-block; margin-left: 10px;" Text="Save" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
                </div>
            </div>
        </RadzenTemplateForm>
        </Authorized>
</AuthorizeView>
}


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private FileDTO _file = new FileDTO();
    private PersonDTO CurrentPerson { get; set; }
    private IList<ProjectDTO> Projects { get; set; }
    private IList<SectionDTO> SectionsList { get; set; }
    private RadzenUpload upload;
    private string TimeToDevelop { get; set; } = string.Empty;
    private string NumbersDrawings { get; set; } = string.Empty;
    private int ProjectId { get; set; }

    protected override async void OnInitialized()
    {

        CurrentPerson = new PersonDTO();
        var authState = await authenticationState;
        CurrentPerson = await personService.GetPersonByNameAsync(authState.User.Identity.Name);

        _file = await fileService.AddFileAsync(new FileDTO { Name = "new_file",DepartmentId=CurrentPerson.DepartmentId,ProjectId=1,SectionId=1 },CurrentPerson.Id);

        var p= await projectService.GetProjectsListAsync();
        Projects = p.ToList();

        var s = await sectionService.GetAllAsync();
        SectionsList = s.ToList();

        StateHasChanged();

    }

    async void Submit(FileDTO arg)
    {
        var authState = await authenticationState;
        CurrentPerson = await personService.GetPersonByNameAsync(authState.User.Identity.Name);
        arg.DepartmentId = CurrentPerson.DepartmentId;
        arg.Name = GetPrefix(arg.Id) + "_" + arg.Name;
        if (int.TryParse(NumbersDrawings, out int num))
        {
            arg.NumbersDrawings = num;
        }
        else
        { 
            arg.NumbersDrawings = 1;
        }
        if (double.TryParse(TimeToDevelop, out double t))
        {
            arg.TimeToDev = t;
        }


        var result= await fileService.UpdateFileAsync(arg);

        ProjectId = arg.ProjectId;

        StateHasChanged();

        await upload.Upload();
        if (result != 0)
        {
            Navigation.NavigateTo("/Files");
        }

    }


    void OnChange(object value, string s)
    {
        _file.ProjectId = (int)value;
    }

    void OnChangeSection(object value, string s)
    {
        _file.SectionId = (int)value;
    }

    void OnChangeUpload(UploadChangeEventArgs args, string name)
    {
        _file.Name = args.Files.First().Name;
    }
    private string GetPrefix(int id)
    {
        var s = "000000" + id;
        s = s.Substring(id.ToString().Length);
        return s;
    }

    async void Cancel()
    {
        await fileService.RemoveFile(_file.Id);
        Navigation.NavigateTo("/Files");
    }


}
