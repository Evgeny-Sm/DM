@page "/AddFile"

@attribute [Authorize(Roles="admin")]

@using DM.BLL.Services
@using DocumentMaster.BlazorServer.Authentication
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Models


@inject FileService fileService
@inject DepartmentService departmentService
@inject PersonService personService
@inject ProjectService projectService
@inject DialogService DialogService
@inject NavigationManager Navigation
@inject ProtectedSessionStorage sessionStorage
@inject IJSRuntime JS



<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />
<div>
    @Name bfvhd
</div>
<AuthorizeView>
    <Authorized>
        <br /><br />
        <button class="btn btn-btn-outline-primary" @onclick="DisplayGreetingAlert">Display Greeting Alert</button>
    </Authorized>
</AuthorizeView>

<AuthorizeView>
    <Authorized>
        <h3>Добавление файла @Name</h3>
        <RadzenTemplateForm Context="Context1" Data="@_file" Submit="@((FileDTO args) => { Submit(args);})">
            <div class="row">
                <div class="col-md-10">
                    <RadzenFieldset Text="Загрузка файла на сервер">
                        <div class="row">
                            <div class="col-md-6 col-lg-4 col-xl-3 p-3">
                                <RadzenCard>
                                    <h4 class="mb-4">@Name</h4>
                                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                                    Data=@Projects TextProperty="Name" ValueProperty="Id" Change=@(args => OnChange(args, "DropDown with custom filter operator")) />
                                </RadzenCard>
                            </div>
                        </div>
                        <br>
                        <div class="col-md-4">
                            <RadzenTextBox style="width: 100%;" @bind-Value="_file.Name" Name="Название" />
                        </div>
                    </RadzenFieldset>
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" style="display: inline-block; margin-left: 10px;" Text="Save" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
                </div>
            </div>
        </RadzenTemplateForm>
        </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private FileDTO _file = new FileDTO();
    private PersonDTO CurrentPerson { get; set; }
    private IList<ProjectDTO> Projects { get; set; }
    private string Name { get; set; }


    protected override async void OnInitialized()
    {
        CurrentPerson = new PersonDTO();
        var authState =  authenticationState.Result;
        CurrentPerson = await personService.GetPersonByNameAsync(authState.User.Identity.Name);
        var p=await projectService.GetProjectsListAsync();
        Projects = p.ToList();
        Name = Projects.First().Name;

    }

    async void Submit(FileDTO arg)
    {
        var authState = await authenticationState;
        CurrentPerson = await personService.GetPersonByNameAsync(authState.User.Identity.Name);
        arg.DepartmentId = CurrentPerson.DepartmentId;
        var result= await fileService.AddFileAsync(arg,CurrentPerson.Id);

        if (result != null)
        {
            Navigation.NavigateTo("/Files");
        }

    }
  

    void OnChange(object value, string s)
    {
        _file.ProjectId = (int)value;
    }

        void Cancel()
    {
        //
    }
        private async Task DisplayGreetingAlert()
    {
        var authState = await authenticationState;
        var b=authState.User.IsInRole("user");
        var userSessionStorageResult = await sessionStorage.GetAsync<UserSession>("UserSession");
        var personId = userSessionStorageResult.Value.PersonId;
        var message = $"Hello {authState.User.Identity.Name} {personId} {b} {Name}";
        await JS.InvokeVoidAsync("alert", message);
    }


}
