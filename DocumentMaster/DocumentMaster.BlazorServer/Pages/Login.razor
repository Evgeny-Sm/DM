@page "/login"

@using DM.BLL.Authorization
@using DM.BLL.Services
@using DocumentMaster.BlazorServer.Authentication
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop

@inject AccountService accountService
@inject PersonService PersonService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

<img src="/images/background.jpg" class="background" />
<div class="row justify-content-md-center">
    <div class="col-md-auto">
        <RadzenCard Style="width: 120%;">
            <h2 class="mb-4">Log in</h2>
            <input type="text"
                   placeholder="User Name" size="20"
                   @bind="@model.UserName" />
            &nbsp; &nbsp;&nbsp;&nbsp;
            <input type="password"
                   placeholder="Password" size="20"
                   @bind="@model.Password" />
            &nbsp; &nbsp;
            <div class="mb-3 d-grid gap-2">
                <button @onclick="Authenticate" class="btn btn-primary">Login</button>
            </div>
        </RadzenCard>
    </div>
</div>

@code
{
    private class Model
    {
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
    private Model model = new Model();

    private async Task Authenticate()
    {
        if (model.UserName == string.Empty || model.Password == string.Empty)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
        var userAccount =await accountService.GetByUserName(model.UserName);
        var h = SecureData.GetHashData(model.Password);

        if (userAccount == null || userAccount.Password != h)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
        var person = await PersonService.GetPersonByIdAsync(userAccount.PersonId);

        if (person == null || person.IsConfirmed==false || person.IsDeleted==true)
        {
            await js.InvokeVoidAsync("alert", "This account is not confirmed yet or was deleted");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role,
                PersonId=userAccount.PersonId
            });
            
        navManager.NavigateTo("/", true);

    }
}



