@page "/Questions/{id?}"

@attribute [Authorize]

@using DM.BLL.Services
@using Models
@using DM.DAL.Models
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.EntityFrameworkCore
@using System.Text.Json

@inject PersonService PersonService
@inject QuestionService QuestionService
@inject DialogService DialogServices



<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-md-6">
                <div class="row">
                    <div class="col-2">
                        <RadzenButton Text="Добавить" ButtonStyle="ButtonStyle.Secondary"
                                      Click=@OpenAddQuestDialog />
                    </div>
                    <div class="col-md-4">
                        <input type="text" value="@InputString" @onchange="@((args)=>Find(args))" class="form-control" placeholder="поиск..." />
                    </div>
                    @if (!string.IsNullOrEmpty(InputString))
                    {
                        <div class="col-1">
                            <button type="button" @onclick=@(args=>SetAllFileList()) class="btn-close"></button>
                        </div>
                    }
                    <div class="col-4 ">
                        <RadzenCheckBox @bind-Value=@CheckBox Name="CheckBox1" TValue="bool" Change=@(args => OnChangeCheckBox(args)) />
                        <RadzenLabel Text="Только отслеживаемые" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                    </div>
                    @if (!(SelectedQuestion is null || string.IsNullOrEmpty(SelectedQuestion.Title)))
                    {
                        <div class="col-1">
                            <button type="button" @onclick=@(args=>RemoveQuestion()) class="btn-close"></button>
                        </div>
                    }

                </div>
                <div class="row">
                    <div class="col-md-12">
                        <RadzenDataGrid Data="@QuestionToView" TItem="QuestionDTO" ValueChanged="@(args=>ValueChanged(args))" AllowVirtualization="true" Style="height:600px"
                                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                                        AllowSorting="true">
                            <Columns>
                                <RadzenDataGridColumn TItem="QuestionDTO" Property="Id" Title="Id" Width="20px" />
                                <RadzenDataGridColumn TItem="QuestionDTO" Property="Title" Title="Тема" Width="60px" />
                                <RadzenDataGridColumn TItem="QuestionDTO" Property="ToDoCount" Title="Не снято" Width="20px" />
                                <RadzenDataGridColumn TItem="QuestionDTO" Property="UnreadedCount" Title="Непрочитано" Width="20px" />

                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="row">
                    <InfoQuest ToDoStatus="@StatusChanged" CurrentQuestion="@SelectedQuestion" />
                </div>
                <br />
                <div class="row">
                    @if (SelectedQuestion is not null )
                    {
                        <NoteChat CurrentQuestion="@SelectedQuestion" />
                    }
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public string id { get; set; }

    public IEnumerable<QuestionDTO> QuestionDTOs { get; set; } = new List<QuestionDTO>();
    public IEnumerable<QuestionDTO> QuestionToView { get; set; } = new List<QuestionDTO>();
    public IEnumerable<QuestionDTO> FindedQuestions { get; set; } = new List<QuestionDTO>();

    private PersonDTO CurrentPerson { get; set; } = new();

    private QuestionDTO SelectedQuestion { get; set; }

    private QuestionDTO CurrQuest { get; set; }

    private string RememberedString { get; set; } = string.Empty;
    private string InputString { get; set; } = string.Empty;
    private bool CheckBox { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;

        CurrentPerson = await PersonService.GetPersonByNameAsync(authState.User.Identity.Name);

        if (id is null)
        {
            QuestionDTOs = await QuestionService.GetAllAsync();         
        }
        else
        {
            CurrQuest =  await QuestionService.GetItemByIdAsync(int.Parse(id));
            if (CurrQuest is not null)
            {
                QuestionDTOs = QuestionDTOs.Append(CurrQuest);
            }
        }



        if (QuestionDTOs is not null)
        {
            foreach (var q in QuestionDTOs)
            {
                var i = await QuestionService.GetCountUnreaded(CurrentPerson.Id, q.Id);
                var k = await QuestionService.GetCountToDo(CurrentPerson.Id, q.Id);
                q.UnreadedCount = i;
                q.ToDoCount = k;
            }

            QuestionToView = QuestionDTOs.OrderByDescending(q => q.Id);

        }

        StateHasChanged();
    }

    private void ValueChanged(IList<QuestionDTO> args)
    {
        SelectedQuestion = args.FirstOrDefault();
        SelectedQuestion.IsDoing= QuestionService.IsQuestionDoing(SelectedQuestion.Id, CurrentPerson.Id);
        
    }

    private async Task OpenAddQuestDialog()
    { 
        QuestionDTO data = await DialogServices.OpenAsync<AddQuestDialog>("Добавить решение", new Dictionary<string, object>(),
              new DialogOptions()
                  {
                      Width = "800px",
                      Height = "600px",
                      Resizable = true,
                      Draggable = false,
                      CloseDialogOnOverlayClick = false
                  });

        if (data != null)
        {
            data.CreatorId = CurrentPerson.Id;

            data.PersonIds = data.PersonIds.Distinct().ToList();

            var res = await QuestionService.AddItemAsync(data);

            QuestionToView = QuestionDTOs.Append(res).OrderByDescending(o=>o.Id);
        }

    }
    private async Task Find(ChangeEventArgs args)
    {
        InputString = args.Value.ToString();
        string filteringString = args.Value.ToString();

        if (filteringString.Length >= 2 && filteringString.Substring(0, 2) != RememberedString)
        {
            RememberedString = filteringString.Substring(0, 2);

            FindedQuestions = QuestionDTOs.Where(q => q.Title.Contains(filteringString)
            || q.ProjectName.Contains(filteringString)).OrderByDescending(q => q.Id);
            QuestionToView = FindedQuestions;
        }
        if (filteringString.Length > 2 && filteringString.Substring(0, 2) == RememberedString)
        {
            FindedQuestions = QuestionToView.Where(q => q.Title.Contains(filteringString)
            || q.ProjectName.Contains(filteringString)).OrderByDescending(q => q.Id);
            QuestionToView = FindedQuestions;
        }

    }
    private async Task SetAllFileList()
    {
        QuestionToView = QuestionDTOs.OrderByDescending(q => q.Id);
        FindedQuestions = new List<QuestionDTO>();
        InputString = string.Empty;
    }
    private void OnChangeCheckBox(bool args)
    {
        if (args)
        {
            QuestionToView = QuestionToView.Where(q => q.PersonIds.Contains(CurrentPerson.Id)
            || q.CreatorId == CurrentPerson.Id)
            .OrderByDescending(q => q.Id).ToList();
        }
        else
        {
            if (FindedQuestions.Any())
            {
                QuestionToView = FindedQuestions.OrderByDescending(q => q.Id);
            }
            else
            { 
                QuestionToView = QuestionDTOs.OrderByDescending(q => q.Id);
            }
        }

    }
    private async Task RemoveQuestion()
    {
        var res =await DialogServices.Confirm("Are you sure?", "Removing", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (res == true)
        {

            var authState = await authenticationState;
            if (SelectedQuestion.CreatorId == CurrentPerson.Id || authState.User.IsInRole("admin"))
            {
                int id = SelectedQuestion.Id;
                await QuestionService.HideItem(SelectedQuestion.Id);
                QuestionToView = QuestionToView.Where(q => q.Id != id);
                QuestionDTOs = QuestionDTOs.Where(q => q.Id != id);
                SelectedQuestion = new();
                StateHasChanged();
            }
        }

    }

    private void StatusChanged(bool currStatus)
    { 
        SelectedQuestion.IsDoing=currStatus;
    }

}
