@page "/Projects"




@using DM.BLL.Services
@using DM.DAL.Models
@using Models
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.EntityFrameworkCore


@inject NavigationManager Navigation
@inject PersonService personService
@inject ProjectService projectService
@inject ReleaseService ReleaseService

@inject IDbContextFactory<DMContext> contextFactory




<div class="row">
    <div class="col-md-4">

        <AddProjectButton />

    </div>


</div>

<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-md-4">
                <ProjectList ProjectsGetCallBack="@SetSelectedProjects" />
            </div>


            <div class="col-md-8">
                @if (SelectedProjects.Count != 0)
                {
                    <div class="row">
                        <div class="col-md-8">
                            <div class="row">
                                <InfoProject SelectedProjects="@SelectedProjects" />
                            </div>

                            <div class="row">
                                <ReleaseList Releases="@Releases" Project="@CurrProj" />
                            </div>

                        </div>
                        @if (SelectedFiles.Count > 0)
                        {
                            <div class="col-md-4">
                                <InfoFile SelectedFiles="@SelectedFiles" SetOldVersion="@SetVersionProperty" />
                            </div>
                        }
                    </div>
                    <div class="row">
                        <div class="col-md-12">

                            @if (SelectedFiles.Count != 0)
                            {
                                <div class="row">
                                    <div>
                                        <DownloadFile SelectedFiles="@SelectedFiles" />
                                    </div>
                                </div>
                            }
                            <div class="row">
                                <FileList FilesGetCallBack="@SetSelectedFiles"
                                      files="@_Files"> </FileList>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

    </Authorized>
</AuthorizeView>

@code {

    private IList<ProjectDTO> SelectedProjects { get; set; }

    private IList<FileUnit> SelectedFiles { get; set; }

    private IList<FileUnit> _Files { get; set; }

    private IEnumerable<ProjectDTO> _projects { get; set; }

    private List<ReleaseDTO> Releases { get; set; }
    private ProjectDTO CurrProj { get; set; } = new();

    private bool CheckBoxOldVersions = false;


    protected override async void OnInitialized()
    {
        SelectedProjects = new List<ProjectDTO>();
        SelectedFiles = new List<FileUnit>();
        _Files = new List<FileUnit>();
    }



    private async Task SetSelectedProjects(IList<ProjectDTO> projects)
    {
        if (projects != null)
        {
            SelectedProjects = projects;
            CurrProj = projects.FirstOrDefault();
            _Files = GetFilesInProject(projects.FirstOrDefault().Id).ToList();
            var rel = await ReleaseService.GetItemByProjIdAsync(CurrProj.Id);
            Releases = rel.ToList();

            SelectedFiles = new List<FileUnit>();
        }


    }

    private void SetSelectedFiles(IList<FileUnit> fileUnits)
    {
        if (fileUnits != null)
        {
            SelectedFiles = fileUnits;
        }
    }

    private IEnumerable<FileUnit> GetFilesInProject(int id)
    {
        using var context = contextFactory.CreateDbContext();
        return context.FileUnits.Where(f => f.ProjectId == id && f.IsDeleted == false)
        .Include(p => p.Person).Include(d => d.Department)
        .Include(p => p.Project).Include(s => s.Section)
        .OrderByDescending(f => f.Id).ToArray();
    }

    private void SetVersionProperty(bool val)
    {
        SelectedFiles.FirstOrDefault().IsOldVersion = val;
    }
    private void OnChangeVers(bool value)
    {
        if (_Files is not null)
        {

            if (CheckBoxOldVersions)
            {
                _Files = _Files.Where(t => t.IsOldVersion != true).OrderByDescending(f => f.Id).ToArray();
                SelectedFiles = new List<FileUnit>();
            }
            else
            {
                _Files = GetFilesInProject(SelectedProjects.FirstOrDefault().Id).ToList();
                SelectedFiles = new List<FileUnit>();
            }
        }

    }
}
