@page "/Files"

@attribute [Authorize]

@using DM.BLL.Services
@using DM.DAL.Models
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.EntityFrameworkCore
@using Models
@using System.Text.Json


@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject FileService fileService
@inject PersonService personService
@inject DMContext db
@inject IWebHostEnvironment WebHostInvironment



<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

<h3>Files </h3>
<AuthorizeView>
    <Authorized>

        <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" Text="Добавить" Click="@NavigatetoToAddFile" />
        <div class="row" >
            <div class="col-md-6">
                <RadzenDataGrid Data="@files" TItem="FileUnit" @bind-Value="@SelectedFiles" AllowVirtualization="true" Style="height:800px"
                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                                AllowSorting="true">
                    <Columns>
                        <RadzenDataGridColumn TItem="FileUnit" Property="Id" Title="Id" Width="50px" />
                        <RadzenDataGridColumn TItem="FileUnit" Property="Name" Title="Название" Width="250px" />
                        <RadzenDataGridColumn TItem="FileUnit" Property="ProjectId" Title="Номер проекта" Width="50px" />
                    </Columns>
                </RadzenDataGrid>
            </div>
            <div class="col-md-6">
                @if (SelectedFiles.Count != 0)
                {
                    <RadzenButton Click=@(args => DownloadFileFromStream())  ButtonStyle="ButtonStyle.Secondary" Text="Скачать"  />

                    <RadzenCard Style="margin-bottom:20px">
                        <b>Разработал: @GetDeveloper()   </b>
                    </RadzenCard>
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {

    IList<FileUnit> SelectedFiles { get; set; }

    [Parameter] public IEnumerable<FileUnit>? files{ get; set; }

    private PersonDTO Developer { get; set; }

    private IEnumerable<PersonDTO> Persons { get; set; }



    protected override async  void OnInitialized()
    {

        if (files == null)
        {
            files = db.FileUnits.Include(f=>f.UserActions).ToArray();
            SelectedFiles = new List<FileUnit>() ;
        }


    }
    protected override async Task OnParametersSetAsync()
    {
        SelectedFiles = new List<FileUnit>() ;
        Persons =await personService.GetPersonsAsync();
    }

    private string GetDeveloper()
    {
        if (SelectedFiles.Count == 0)
        {
            return null;
        }
        var perId = SelectedFiles.FirstOrDefault().UserActions.Where(u => u.ActionNumber == 1).Single().PersonId;

        PersonDTO p =Persons.Where(p=>p.Id==perId).Single();
        if (p != null)
        {
            return $"{p.FirstName} {p.LastName}";
        }
        return null;
    }

    private async Task DownloadFileFromStream()
    {
        var name = SelectedFiles.FirstOrDefault().Name;
        var downloadPath = WebHostInvironment.WebRootPath + Configuration.GetConnectionString("ProjectRootDir") 
                            + $"\\{SelectedFiles.FirstOrDefault().ProjectId}" + $"\\{name}";
        var fileStream = File.OpenRead(@$"{downloadPath}");

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", name, streamRef);
    }


        private void NavigatetoToAddFile()
    {
        Navigation.NavigateTo("/AddFile");
    }
}
