@page "/Files"

@attribute [Authorize]

@using DM.BLL.Services
@using DM.DAL.Models
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.EntityFrameworkCore
@using Models
@using System.Text.Json
@using System.Security.Claims


@inject IConfiguration Configuration
@inject IJSRuntime JS
@inject FileService fileService
@inject PersonService PersonService
@inject IDbContextFactory<DMContext> contextFactory
@inject IWebHostEnvironment WebHostInvironment



<h3>Файлы </h3>
<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-2">
                <AddFileButton FileCreated="HandReload" />
            </div>
            <div class="col-md-4">
                <input type="text" value="@InputString"  @onchange="@((args)=>Find(args))" class="form-control" placeholder="поиск..." />
            </div>
            @if (!string.IsNullOrEmpty(InputString))
            {
                <div class="col-1">
                    <button type="button" @onclick=@(args=>SetAllFileList()) class="btn-close"></button>
                </div>
            }
        </div>
        <div class="row" >
            <div class="col-md-8">
                <RadzenCard>
                    <div class="d-inline-block">
                        <RadzenCheckBox @bind-Value=@CheckBoxUser Name="CheckBox1" TValue="bool" Change=@(args => OnChange(args)) />
                        <RadzenLabel Text="Только мои" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                       
                    </div>
                </RadzenCard>
                <FileList files="@files"  FilesGetCallBack="@SetSelectedFiles"/>
            </div>
            <div class="col-md-4">
                @if (SelectedFiles.Count != 0)
                {
                    <div class="d-inline-block">
                        <DownloadFile SelectedFiles="@SelectedFiles" />
                        @if (IsReadyToCheck)
                        {
                            <SendToCheckButton SendedToCheck="@SetSendedStatus" SelectedFiles="@SelectedFiles"/>
                            <ReloadFileButton SelectedFiles="@SelectedFiles"/>                          
                        }
                        @if (IsReadyToCheck || CurrentPerson.Role=="admin")
                        {
                            <HideFileButton FileWasRemoved="@SetFiles" SelectedFiles="@SelectedFiles" />
                        }
                    </div>
                    <InfoFile SelectedFiles="@SelectedFiles" SetOldVersion="@SetVersionProperty"/>
                    <RecoverButton FileWasRecover="@SetFiles" SelectedFiles="@SelectedFiles" />
                    <ResetFileButton FileWasReset="@SetFiles" SelectedFiles="@SelectedFiles" />
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private IList<FileUnit> SelectedFiles { get; set; }

    private IEnumerable<FileUnit>? files { get; set; }

    private IEnumerable<FileUnit>? filesFromBase { get; set; }

    private bool CheckBoxUser = false;

    private bool CheckBoxOldVersions = false;

    private PersonDTO CurrentPerson { get; set; } = new();

    private bool IsReadyToCheck { get; set; } = true;

    private string RememberedString { get; set; } = string.Empty;
    private string InputString { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {

        using var context = contextFactory.CreateDbContext();
        filesFromBase = context.FileUnits.Where(f => f.IsDeleted == false).Include(d => d.Department)
        .Include(p => p.Person).Include(p => p.Project)
        .Include(s => s.Section).OrderByDescending(f => f.Id).ToArray();
        files = filesFromBase;

        SelectedFiles = new List<FileUnit>();
        var authState = await authenticationState;

        CurrentPerson.Id = int.Parse(authState.User.Claims
            .Where(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")
            .FirstOrDefault().Value);

    }

    private void HandReload(bool b)
    {
        this.OnInitialized();
    }

    private void SetSelectedFiles(IList<FileUnit> fileUnit)
    {

        if (fileUnit != null)
        {
            SelectedFiles = fileUnit;
            if (SelectedFiles.FirstOrDefault().PersonId != CurrentPerson.Id
                || SelectedFiles.FirstOrDefault().Status != StatusFile.Work)

            {
                IsReadyToCheck = false;
            }
            else
            {
                IsReadyToCheck = true;
            }
        }
    }

    private void OnChange(bool value)
    {
        if (files is not null)
        {

            if (CheckBoxUser)
            {
                files = files.Where(t => t.Person.Id == CurrentPerson.Id).OrderByDescending(f => f.Id).ToArray();
            }
            else
            {
                files = filesFromBase;
                CheckBoxOldVersions = false;
                InputString = string.Empty;
            }
        }

    }


    private void SetSendedStatus(bool statusFromDialog)
    {
        if (statusFromDialog)
        {
            using var context = contextFactory.CreateDbContext();
            files = context.FileUnits.Where(f => f.IsDeleted == false).Include(d => d.Department).Include(p => p.Person).Include(p => p.Project).Include(s => s.Section).OrderByDescending(f => f.Id).ToArray();
            SelectedFiles = new List<FileUnit>();
        }
    }
    private async Task Find(ChangeEventArgs args)
    {
        var authState = await authenticationState;
        InputString = args.Value.ToString();
        string filteringString = args.Value.ToString().ToLower();
        if (filteringString == "show-removed" && authState.User.IsInRole("admin"))
        { 
            using var context = contextFactory.CreateDbContext();
            files = await context.FileUnits.Where(f => f.IsDeleted == true).Include(p => p.Person).Include(p => p.Project).
            Include(d => d.Department).Include(p => p.Project).
            Include(s => s.Section).OrderByDescending(f => f.Id).ToArrayAsync();
            return;
        }

        if (filteringString.Length >= 2 && filteringString.Substring(0, 2) != RememberedString)
        {
            RememberedString = filteringString.Substring(0, 2);
            using var context = contextFactory.CreateDbContext();
            files = await context.FileUnits.Where(f => f.IsDeleted == false).Include(p => p.Person).Include(p => p.Project).
            Where(f => f.Name.ToLower().Contains(filteringString) || f.Description.ToLower().Contains(filteringString)
            || f.Project.Name.ToLower().Contains(filteringString) || f.Person.LastName.ToLower().Contains(filteringString)).
            Include(d => d.Department).Include(p => p.Project).
            Include(s => s.Section).OrderByDescending(f => f.Id).ToArrayAsync();

        }
        if (filteringString.Length > 2 && filteringString.Substring(0, 2) == RememberedString)
        {
            files = files.Where(f => f.Name.ToLower().Contains(filteringString) || f.Description.ToLower().Contains(filteringString)
            || f.Project.Name.ToLower().Contains(filteringString) || f.Person.LastName.ToLower().Contains(filteringString)).ToArray();
        }
    }
    private async Task SetAllFileList()
    { 
        files = filesFromBase;
        InputString = string.Empty;
        CheckBoxOldVersions = false;
        CheckBoxUser = false;
    }
    private void SetFiles(int id)
    {
        files = files.Where(f => f.Id != id).ToArray();
        SelectedFiles = new List<FileUnit>();
    }

    private void SetVersionProperty(bool val)
    {
        SelectedFiles.FirstOrDefault().IsOldVersion = val;
    }

}
