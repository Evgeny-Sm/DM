@page "/Files"

@attribute [Authorize]

@using DM.BLL.Services
@using DM.DAL.Models
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.EntityFrameworkCore
@using Models
@using System.Text.Json


@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject FileService fileService
@inject PersonService PersonService
@inject IDbContextFactory<DMContext> contextFactory
@inject IWebHostEnvironment WebHostInvironment



<h3>Files </h3>
<AuthorizeView>
    <Authorized>
        <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" Text="Добавить" Click="@NavigatetoToAddFile" />
        <div class="row" >
            <div class="col-md-6">
                <RadzenCard>
                    <div class="d-inline-block">
                        <RadzenCheckBox @bind-Value=@CheckBoxUser Name="CheckBox1" TValue="bool" Change=@(args => OnChange(args)) />
                        <RadzenLabel Text="Только мои" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                    </div>
                </RadzenCard>
                <FileList files="@files"  FilesGetCallBack="@SetSelectedFiles"/>
            </div>
            <div class="col-md-6">
                @if (SelectedFiles.Count != 0)
                {
                    <div class="d-inline-block">
                        <DownloadFile SelectedFiles="@SelectedFiles" />
                    @if (IsReadyToCheck)
                    {
                        <SendToCheckButton SelectedFile="@SelectedFiles"/>
                    }
                    </div>
                    <InfoFile SelectedFiles="@SelectedFiles"/> 
                    
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private IList<FileUnit> SelectedFiles { get; set; }

    private IEnumerable<FileUnit>? files{ get; set; }

    private bool CheckBoxUser = false;

    private PersonDTO CurrentPerson { get; set; }

    private bool IsReadyToCheck { get; set; } = true;


    protected override async  void OnInitialized()
    {
        if (files == null)
        {
            using var context = contextFactory.CreateDbContext();
            files = context.FileUnits.Include(f => f.UserActions).ThenInclude(u => u.Person).Include(d => d.Department).Include(p => p.Project).Include(s => s.Section).ToArray();
        }
        SelectedFiles = new List<FileUnit>();
        var authState = await authenticationState;

        CurrentPerson = await PersonService.GetPersonByNameAsync(authState.User.Identity.Name);
    }



    private void SetSelectedFiles(IList<FileUnit> fileUnit)
    {
        if (fileUnit != null)
        {
            SelectedFiles = fileUnit;
            if (SelectedFiles.FirstOrDefault().UserActions.First().PersonId != CurrentPerson.Id)
            {
                IsReadyToCheck = false;
            }
            else
            {
                IsReadyToCheck = true;
            }
        }
    }

    private void OnChange(bool value)
    {
        using var context = contextFactory.CreateDbContext();
        if (CheckBoxUser)
        {
            files = context.FileUnits.Include(f => f.UserActions).ThenInclude(u => u.Person).Where(t => t.UserActions.First().PersonId == CurrentPerson.Id).Include(d => d.Department).Include(p => p.Project).Include(s => s.Section).ToArray();
        }
        else
        {
            files = context.FileUnits.Include(f => f.UserActions).ThenInclude(u => u.Person).Include(d => d.Department).Include(p => p.Project).Include(s => s.Section).ToArray();
        }

    }

        private void NavigatetoToAddFile()
    {
        Navigation.NavigateTo("/AddFile");
    }
}
