@page "/FilesToCheck"

@attribute [Authorize]

@using DM.BLL.Services
@using DM.DAL.Models
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.EntityFrameworkCore
@using Models


@inject IDbContextFactory<DMContext> contextFactory
@inject DMContext db
@inject PersonService PersonService
@inject FileService FileService
@inject ControlService ControlService

<h3>FilesToCheck</h3>

<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-md-8">
                <FileList files="@files" FilesGetCallBack="@SetSelectedFiles" />
            </div>
            <div class="col-md-4">
                @if (SelectedFiles.Count != 0)
                {
                    <div class="d-inline-block">
                        <DownloadFile SelectedFiles="@SelectedFiles" />
                        <RadzenButton Click=@(args => CheckingComplete()) ButtonStyle="ButtonStyle.Success" Text="Подтвердить" />
                        <RadzenButton Click=@(args => CheckingDenied()) ButtonStyle="ButtonStyle.Danger" Text="Вернуть" />
                    </div>
                    <InfoFile SelectedFiles="@SelectedFiles" />
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private IList<FileUnit> SelectedFiles { get; set; }=new List<FileUnit>();

    public IList<FileUnit>? files { get; set; }

    private PersonDTO CurrentPerson { get; set; }

    protected override async void OnInitialized()
    {
        var authState = await authenticationState;

        CurrentPerson = await PersonService.GetPersonByNameAsync(authState.User.Identity.Name);
        SelectedFiles = new List<FileUnit>();

        var controls =await ControlService.GetControlsToCheckAsync(CurrentPerson.Id);

        var fileNumbers = controls.Select(a => a.FileUnitId);

        using var context = contextFactory.CreateDbContext();
        files = context.FileUnits.Where(t => fileNumbers.Contains(t.Id)).Include(p => p.Person).Include(d => d.Department).
        Include(p => p.Project).Include(s => s.Section).Include(c=>c.Control)
        .ToList();

        StateHasChanged();

    }

    private void SetSelectedFiles(IList<FileUnit> fileUnit)
    {
        if (fileUnit != null)
        {
            SelectedFiles = fileUnit;
        }
    }

    private async void CheckingComplete()
    {
        var c = await ControlService.GetControlByIdAsync(SelectedFiles.FirstOrDefault().Control.Id);
        c.IsConfirmed = true;
        await ControlService.UpdateControlAsync(c);

        var f = await FileService.GetItemByIdAsync(SelectedFiles.FirstOrDefault().Id);
        f.Status = StatusFile.Archive;
        await FileService.UpdateFileAsync(f);
        files.Remove(SelectedFiles.First()); 

        StateHasChanged();

    }
    private async void CheckingDenied()
    {
        await ControlService.RemoveControlAsynk(SelectedFiles.FirstOrDefault().Control.Id);

        var f = await FileService.GetItemByIdAsync(SelectedFiles.FirstOrDefault().Id);
        f.Status = StatusFile.Work;
        await FileService.UpdateFileAsync(f);
        files.Remove(SelectedFiles.First());

        StateHasChanged();

    }
}
