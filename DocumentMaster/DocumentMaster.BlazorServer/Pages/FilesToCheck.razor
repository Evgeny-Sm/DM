@page "/FilesToCheck"

@attribute [Authorize]

@using DM.BLL.Services
@using DM.DAL.Models
@using DocumentMaster.BlazorServer.Pages
@using Microsoft.EntityFrameworkCore
@using Models


@inject IDbContextFactory<DMContext> contextFactory
@inject DMContext db
@inject PersonService PersonService
@inject FileService FileService
@inject ControlService ControlService
@inject DialogService DialogService
@inject NavigationManager Navigation



<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-md-8">
                <FileList files="@files" FilesGetCallBack="@SetSelectedFiles" />
            </div>
            <div class="col-md-4">
                @if (SelectedFiles!=null&&SelectedFiles.Count != 0)
                {
                    <div class="d-inline-block">
                        <DownloadFile SelectedFiles="@SelectedFiles" />
                        <RadzenButton Click=@(args => CheckingComplete()) ButtonStyle="ButtonStyle.Secondary" Text="Результат" />
                        
                    </div>
                    <InfoFile SelectedFiles="@SelectedFiles" />
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private IList<FileUnit> SelectedFiles { get; set; }

    public IList<FileUnit>? files { get; set; }

    private double AddTime { get; set; }

    private string Descripton { get; set; } = string.Empty;

    private PersonDTO CurrentPerson { get; set; } = new PersonDTO();

    protected override async Task OnInitializedAsync()
    {
        
        var authState = await authenticationState;

        CurrentPerson.Id = int.Parse(authState.User.Claims
            .Where(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")
            .FirstOrDefault().Value);

        var controls =await ControlService.GetControlsToCheckAsync(CurrentPerson.Id);

        var fileNumbers = controls.Select(a => a.FileUnitId);

        using var context = contextFactory.CreateDbContext();
        files = context.FileUnits.Where(f => f.Status == StatusFile.Checking && fileNumbers.Contains(f.Id)).Include(d => d.Department).Include(p => p.Person).
        Include(p => p.Project).Include(s => s.Section).Include(c=>c.Controls)
        .ToList();
        
        StateHasChanged();

    }

    private void SetSelectedFiles(IList<FileUnit> fileUnit)
    {
        if (fileUnit != null)
        {
            SelectedFiles = fileUnit;
        }
    }

    private async Task CheckingComplete()
    {
        ResultCheck res= await DialogService.OpenAsync<ResultCheckDialog>($"Результат проверки",
        new Dictionary<string, object>(),
        new DialogOptions()
          {
              Width = "500px",
              Height = "400px",
              Resizable = true,
              Draggable = false,
              CloseDialogOnOverlayClick = false
          });
        if (res is null)
        {
            return;
        }

        var c = await ControlService.GetActualControlForPersonAsync(SelectedFiles.FirstOrDefault().Id,CurrentPerson.Id);
        c.IsConfirmed = res.IsConfirmed;
        c.IsInAction = false;
        c.TimeForChecking += double.Parse(res.AdditionalTime);
        c.Description = res.Description;
        c.DateTime = DateTime.Now;
        await ControlService.UpdateControlAsync(c);

        var f = await FileService.GetItemByIdAsync(SelectedFiles.FirstOrDefault().Id);
        if (res.IsConfirmed)
        {
            f.Status = StatusFile.Archive;
        }
        else
        {
            f.Status = StatusFile.Work;
        }
        await FileService.UpdateFileAsync(f);

        files.Remove(SelectedFiles.First());

        SelectedFiles = new List<FileUnit>();

        if (files.Count() == 0)
        {
            NavigatetoToFiles();
        }
        
        StateHasChanged();

    }

    private void NavigatetoToFiles()
    {
        Navigation.NavigateTo("/Files");
    }
}
